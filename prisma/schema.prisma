// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum Departament {
  INS
  ESP
  EFEX
  CDO
  RH
  MKT
  PTR
  CDT
}

enum Action {
  BE_PROMOTED
  PROMOTE
  DEMOTE
  FIRE
  GRATIFY
  WARN
}

enum HierarchyKind {
  EXECUTIVE
  MILITARY
}

enum PermissionType {
  COURSE
  OTHER
}

enum ActivityType {
  PROMOTION
  DEMOTION
  FIRE
  BANNING
  LICENSE
  WARNING
  CONTRACTING
  SELLING
  APPROVATION
  CHANGE
}

model Classes {
  id            Int         @id @default(autoincrement())
  approved      String?
  failed        String?
  room          String
  appliedAt     DateTime    @default(now())
  courseAcronym String
  author        String
  departament   Departament
  updatedBy     String?
}

model Course {
  id          String        @id @default(uuid())
  acronym     String        @unique @db.VarChar(10)
  name        String        @unique @db.VarChar(60)
  document    String        @unique
  departament Departament
  powerNeeded Int
  ActivityLog ActivityLog[]
  createdAt   DateTime      @default(now())
}

model User {
  id                  String                @id @default(uuid())
  nick                String                @unique @db.VarChar(30)
  password            String?               @db.VarChar(240)
  discord             String?               @db.VarChar(30)
  lastPromoted        DateTime              @default(now())
  capeSelected        String                @default("base.png")
  createdAt           DateTime              @default(now())
  advNum              Int                   @default(0)
  isAccountActive     Boolean               @default(false)
  isAdmin             Boolean               @default(false)
  role                Roles?                @relation(fields: [roleName], references: [name])
  roleName            String                @default("Soldado")
  bonificationsInRole Int                   @default(0)
  totalBonifications  Int                   @default(0)
  permissionsObtained PermissionsObtained[]
  ActivityLog         ActivityLog[]
  capesAtribbuted     capesAtribbuted[]
  userDepartamentRole userDepartamentRole[]
  Bonification        Bonification[]
}

model ActivityLog {
  id                  Int          @id @default(autoincrement())
  type                ActivityType
  targetId            String
  author              String
  courseAcronym       String?
  isActive            Boolean      @default(true)
  description         String       @db.VarChar(4000)
  course              Course?      @relation(fields: [courseAcronym], references: [acronym])
  user                User         @relation(fields: [targetId], references: [id], onDelete: Cascade)
  createdAt           DateTime     @default(now())
  expiresAt           DateTime?
  newRole             String?
  bonificationsInRole Int?
  oldWarningsAmount   String?
  multipleId String?
}

model Bonification {
  id        Int      @id @default(autoincrement())
  author    String
  targetId  String
  user      User     @relation(fields: [targetId], references: [id])
  reason    String
  createdAt DateTime @default(now())
  gains     Int      @default(0)
}

model Cape {
  id              String            @id @default(uuid())
  name            String            @unique
  fileName        String            @unique
  capesAtribbuted capesAtribbuted[]
  createdAt       DateTime          @default(now())
}

model capesAtribbuted {
  id        String   @id @default(uuid())
  userId    String
  capeId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cape      Cape     @relation(fields: [capeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model PermissionsObtained {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String
  fullName  String
  type      PermissionType
  createdAt DateTime       @default(now())

  @@unique([userId, name, type], name: "permissionIdentifier")
}

model userDepartamentRole {
  id                String          @id @default(uuid())
  userId            String
  departamentRoleId String
  departament       Departament
  departamentRoles  DepartamentRole @relation(fields: [departamentRoleId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())

  @@unique([userId, departamentRoleId], name: "departamentIdentifier")
}

model DepartamentRole {
  id                  String                @id @default(uuid())
  acronym             String                @unique
  name                String                @unique
  departament         Departament
  powerLevel          Int
  userDepartamentRole userDepartamentRole[]
  createdAt           DateTime              @default(now())
}

model PermissionsRequired {
  id            Int            @id @default(autoincrement())
  action        Action
  name          String
  type          PermissionType
  role          Roles?         @relation(fields: [roleName], references: [name])
  roleName      String?
  hierarchyKind HierarchyKind?
  createdAt     DateTime       @default(now())

  @@unique([action, name, roleName], name: "roleSpecificIdentifier")
  @@unique([action, name, hierarchyKind], name: "hierachySpecificIdentifier")
}

model Roles {
  id                        Int                   @id @default(autoincrement())
  hierarchyPosition         Int
  hierarchyKind             HierarchyKind
  name                      String                @unique @db.VarChar(30)
  promotesUntilRolePosition Int
  demoteUntilRolePosition   Int
  fireUntilRolePosition     Int
  gratifyUntilRolePosition  Int
  daysToBePromoted          Int
  permissionsRequired       PermissionsRequired[]
  users                     User[]
  createdAt                 DateTime              @default(now())

  @@unique([hierarchyPosition, hierarchyKind], name: "roleIdentifier")
}

model Session {
  id        String   @id @default(uuid())
  code      String   @db.VarChar(10)
  expiresAt DateTime
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
